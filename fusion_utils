#! /usr/bin/env python

from fusion_utils.run import *
import argparse

parser = argparse.ArgumentParser(prog = "fusion_utils")

parser.add_argument("--version", action = "version", version = "fusion_utils-0.1.0")

subparsers = parser.add_subparsers()

##########
# comp
comp_parser = subparsers.add_parser("comp",
                                    help = "compare gene fusion and structural variation results")

comp_parser.add_argument("fusion1", metavar = "fusion1.txt", default = None, type = str,
                    help = "the path to the 1st fusion")

comp_parser.add_argument("type1", choices=["fusionfusion", "genomonSV", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"], 
                    default = "fusionfusion", help = "the type of the 1st fusion")

comp_parser.add_argument("fusion2", metavar = "fusion2.txt", default = None, type = str,
                    help = "the path to the 2nd fusion")

comp_parser.add_argument("type2", choices=["fusionfusion", "genomonSV", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"],
                    default = "fusionfusion", help = "the type of the 2nd fusion")

comp_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                    help = "the path to the output")

comp_parser.add_argument("bedtools_path", metavar = "bedtools_path", type = str, 
                    help = "the path to the bedtools")

comp_parser.set_defaults(func = comp_main)
##########

##########
# rmdup 
rmdup_parser = subparsers.add_parser("rmdup",
                                    help = "remove putative duplicated gene fusion and structural variation results")

rmdup_parser.add_argument("fusion", metavar = "fusion.txt", default = None, type = str,
                    help = "the path to the fusion result")

rmdup_parser.add_argument("type", choices=["fusionfusion", "genomonSV", "star_fusion", "genomon_fusion"], default = "fusionfusion",
                    help = "the type of the fusion result")

rmdup_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                    help = "the path to the output")

rmdup_parser.add_argument("bedtools_path", metavar = "bedtools_path", type = str,
                    help = "the path to the bedtools")

rmdup_parser.set_defaults(func = rmdup_main)
##########


##########
# filt
filt_parser = subparsers.add_parser("filt",
                                   help = "filtering gene fusion results")

filt_parser.add_argument("fusion", metavar = "fusion.txt", default = None, type = str,
                         help = "the path to the fusion result")

filt_parser.add_argument("type", choices=["fusionfusion", "star_fusion", "genomon_fusion"], default = "fusionfusion",
                         help = "the type of the fusion result")

filt_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                         help = "the path to the output")

filt_parser.add_argument("--thres", metavar = "threshould", default = 3, type = int,
                           help = "the threshould for the support read")

filt_parser.set_defaults(func = filt_main)
##########
args = parser.parse_args()

args.func(args)   


