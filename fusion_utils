#! /usr/bin/env python

from fusion_utils.run import *
import argparse

parser = argparse.ArgumentParser(prog = "fusion_utils")

parser.add_argument("--version", action = "version", version = "fusion_utils-0.2.0")

subparsers = parser.add_subparsers()

##########
# comp
comp_parser = subparsers.add_parser("comp",
                                    help = "compare gene fusion and structural variation results")

comp_parser.add_argument("fusion1", metavar = "fusion1.txt", default = None, type = str,
                         help = "the path to the 1st fusion")

comp_parser.add_argument("type1", choices=["fusionfusion", "fusionfusion_part", "genomonSV", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"], 
                         help = "the type of the 1st fusion")

comp_parser.add_argument("fusion2", metavar = "fusion2.txt", default = None, type = str,
                         help = "the path to the 2nd fusion")

comp_parser.add_argument("type2", choices=["fusionfusion", "fusionfusion_part", "genomonSV", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"],
                         help = "the type of the 2nd fusion")

comp_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                         help = "the path to the output")

comp_parser.add_argument("--margin", default = 10, type = int,
                          help = "the margin for comparing gene fusions (default: %(default)s)")

comp_parser.add_argument("--sv_margin_major", default = 500000, type = int,
                          help = "the margin for comparing gene fusions and SVs (default: %(default)s)")

comp_parser.add_argument("--sv_margin_minor", default = 10, type = int,
                          help = "the margin for comparing gene fusions and SVs (default: %(default)s)")


comp_parser.set_defaults(func = comp_main)
##########

##########
# rmdup 
rmdup_parser = subparsers.add_parser("rmdup",
                                    help = "remove putative duplicated gene fusion and structural variation results")

rmdup_parser.add_argument("fusion", metavar = "fusion.txt", default = None, type = str,
                    help = "the path to the fusion result")

rmdup_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                    help = "the path to the output")

rmdup_parser.add_argument("--type", choices=["fusionfusion", "fusionfusion_part", "genomonSV", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"],
                          default = "fusionfusion", help = "the type of the fusion result (default: %(default)s)")

rmdup_parser.set_defaults(func = rmdup_main)
##########


##########
# filt
filt_parser = subparsers.add_parser("filt",
                                   help = "filtering gene fusion results")

filt_parser.add_argument("fusion", metavar = "fusion.txt", default = None, type = str,
                         help = "the path to the fusion result")

filt_parser.add_argument("output", metavar = "output.txt", default = None, type = str,
                         help = "the path to the output")

filt_parser.add_argument("--type", choices=["fusionfusion", "fusionfusion_part", "star_fusion", "genomon_fusion", "mapsplice2", "tophat_fusion"],
                         default = "fusionfusion", help = "the type of the fusion result (default: %(default)s)")

filt_parser.add_argument("--grc", default = False, action = 'store_true',
                         help = "convert chromosome names to Genome Reference Consortium nomenclature (default: %(default)s)")

filt_parser.add_argument("--genome_id", choices = ["hg19", "hg38", "mm10"], default = "hg19",
                         help = "the genome id used for selecting UCSC-GRC chromosome name corresponding files (default: %(default)s)")

# filt_parser.add_argument("db_dir", metavar = "db_dir", default = None, type = str,
#                          help = "the path to the database directory")


filt_parser.add_argument("--thres", metavar = "threshould", default = 3, type = int,
                           help = "the threshould for the support read  (default: %(default)s)")

filt_parser.add_argument("--filter_same_gene", default = False, action = "store_true",
                         help = "filter gene fusion between the same gene  (default: %(default)s)")

filt_parser.add_argument("--filter_unspliced", default = False, action = "store_true",
                         help = "filter gene fusion that are not spliced  (default: %(default)s)")

filt_parser.set_defaults(func = filt_main)
##########
args = parser.parse_args()

args.func(args)   


